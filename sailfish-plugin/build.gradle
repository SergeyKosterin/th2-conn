apply plugin: 'com.palantir.docker'
apply plugin: 'de.undercouch.download'

ext {
    sailfishPluginDistributesURL    = "https://builds.exactpro.com/sailfish_builds/${sailfish_plugin_version_major}.${sailfish_plugin_version_minor}/plugins"
    sailfish_plugin_version         = "${sailfish_plugin_version_major}.${sailfish_plugin_version_minor}.${ -> sailfish_plugin_version_maintenance}.${ -> sailfish_plugin_version_build}"
    sailfish_plugin_archive_name    = "${sailfish_plugin_name}_${sailfish_plugin_version_major}.${sailfish_plugin_version_minor}.${ -> sailfish_plugin_version_maintenance}_b${ -> sailfish_plugin_version_build}_core_${ -> sailfish_plugin_version_major}.${ -> sailfish_plugin_version_minor}.0.zip"
    downloadPath                    = "${buildDir}/download/plugin_build.zip"

    dockerImageVersion              = "${version_major}.${version_minor}.${version_maintenance}.${version_build}-sf_${sailfish_plugin_version_major}.${sailfish_plugin_version_minor}.${ -> sailfish_plugin_version_maintenance}.${ -> sailfish_plugin_version_build}"
    dockerSailfishWorkspaceDir      = 'sailfish/workspace'
}

task writeDockerInfo(type: WriteProperties) {
    if (project.hasProperty('use_last_sailfish_plugin')) {
        def downloadLastBuildsPath = "${buildDir}/download/last_build.zip"

        download {
            src "${sailfishPluginDistributesURL}/${sailfish_plugin_name}/last_build.zip"
            dest downloadLastBuildsPath
            onlyIfModified true
        }

        copy {
            from zipTree(downloadLastBuildsPath).matching { include '**/VERSION' }
            into "${buildDir}/docker-info"
            eachFile { file -> file.path = file.name }
        }

        def properties = new Properties()
        file("${buildDir}/docker-info/VERSION").withInputStream { properties.load(it) }
        sailfish_plugin_version_maintenance = properties.getProperty('revision')
        sailfish_plugin_version_build = properties.getProperty('build_number')

        println "Version is overrated to ${dockerImageVersion}"
    }

    outputFile "${buildDir}/docker-info/info.properties"
    property ('docker-image-version', dockerImageVersion)
    property ('sailfish-plugin-name', sailfish_plugin_name)
    property ('sailfish-plugin-version', sailfish_plugin_version)
}

task downloadFile(dependsOn: writeDockerInfo, type: Download) {
    src "${sailfishPluginDistributesURL}/${sailfish_plugin_name}/${sailfish_plugin_archive_name}"
    dest downloadPath
    onlyIfModified true
}

dockerPrepare {
    dependsOn(project.rootProject.tasks.dockerTag)
    dependsOn downloadFile
}

docker {
    name "${target_docker_repository}/${docke_image_name}:${dockerImageVersion}"
    tag 'local-version', "${docke_image_name}:${dockerImageVersion}"

    labels(['sailfish-plugin-name': sailfish_plugin_name,
            'sailfish-plugin-version': sailfish_plugin_version])

    buildArgs([SOURCE_DOCKER_VERSION: connectivityDockerImageVersion])

    copySpec.with {
        from(zipTree(downloadPath)) {
            into dockerSailfishWorkspaceDir
            exclude '**/help/**'
        }
    }
}